{
  "_args": [
    [
      {
        "raw": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
        "spec": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
        "type": "local"
      },
      "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/apm-install-dir-117627-22419-y3c5a4.u5fl0afw29"
    ]
  ],
  "_from": "../d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
  "_id": "docblockr@0.11.0",
  "_inCache": true,
  "_location": "/docblockr",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
    "spec": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
  "_shasum": "02c578f52504bf12a05fbe5ed13a8ec56b31b99a",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/d-117627-22419-1a1kjmd.ru78589f6r/package.tgz",
  "_where": "/private/var/folders/9x/98h5wfr9721822s23sk2xg9c0000gn/T/apm-install-dir-117627-22419-y3c5a4.u5fl0afw29",
  "atomTestRunner": "./spec/runner",
  "bugs": {
    "url": "https://github.com/nikhilkalige/docblockr/issues"
  },
  "consumedServices": {
    "snippets": {
      "versions": {
        "^0.1.0": "consumeSnippetsService"
      }
    }
  },
  "dependencies": {},
  "description": "A helper package for writing documentation",
  "devDependencies": {
    "atom-mocha-test-runner": "0.2.2",
    "chai": "^3.5.0",
    "js-yaml": "^3.6.1"
  },
  "engines": {
    "atom": ">0.50.0"
  },
  "homepage": "https://github.com/nikhilkalige/docblockr#readme",
  "license": "MIT",
  "main": "./lib/docblockr.js",
  "name": "docblockr",
  "optionalDependencies": {},
  "readme": "# Docblockr Package\n[![Build Status](https://img.shields.io/travis/nikhilkalige/docblockr/master.svg?style=flat-square)](https://travis-ci.org/nikhilkalige/docblockr)\n\n[View the changelog](https://github.com/nikhilkalige/docblockr/blob/master/CHANGELOG.md)\n\nDocBlockr is a package for [Atom][atom] which is designed to make writing documentation faster and easier.\n\nThe package currently supports the following languages -\n\n* ActionScript\n* C, C++, Cuda-C++\n* CoffeeScript\n* Groovy\n* Haxe\n* Java\n* JavaScript\n* ObjC, ObjC++\n* PHP\n* Processing\n* Rust\n* SASS\n* TypeScript\n\n## Installing\n\nUse the Atom package manager, which can be found in the Settings view or\nrun `apm install docblockr` from the command line.\n\n## Feature requests & bug reports\n\nThe main development branch is `develop` and the stable 'production' branch is `master`. Please remember to base your branch from `develop` and issue the pull request back to that branch.\n\n## Usage\n\n> Below are some examples of what the package does. Note that there are no keyboard shortcuts required to trigger these completions - just type as normal and it happens for you!\n\n### Docblock completion\n\nPressing **enter** or **tab** after `/**` (or `###*` for Coffee-Script) will yield a new line and will close the comment.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/basic.gif)\n\nSingle-asterisk comment blocks behave similarly:\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/basic-block.gif)\n\n### Function documentation\n\nHowever, if the line directly afterwards contains a function definition, then its name and parameters are parsed and some documentation is automatically added.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/function-template.gif)\n\nYou can then press `tab` to move between the different fields.\n\nIf you have many arguments, or long variable names, it might be useful to spread your arguments across multiple lines. DocBlockr will handle this situation too:\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/long-args.gif)\n\nIn languages which support type hinting or default values, then those types are prefilled as the datatypes.\n\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/type-hinting.gif)\n\nDocBlockr will try to make an intelligent guess about the return value of the function.\n\n- If the function name is or begins with \"set\" or \"add\", then no `@return` is inserted.\n- If the function name is or begins with \"is\" or \"has\", then it is assumed to return a `Boolean`.\n- In Javascript, if the function begins with an uppercase letter then it is assumed that the function is a class definition. No `@return` tag is added.\n- In PHP, some of the [magic methods][magicmethods] have their values prefilled:\n  - `__construct`, `__destruct`, `__set`, `__unset`, `__wakeup` have no `@return` tag.\n  - `__sleep` returns an `Array`.\n  - `__toString` returns a `string`.\n  - `__isset` returns a `bool`.\n\n### Variable documentation\n\nIf the line following your docblockr contains a variable declaration, DocBlockr will try to determine the data type of the variable and insert that into the comment.\n\nIf you press `shift+enter` after the opening `/**` then the docblockr will be inserted inline.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/vars.gif)\n\nDocBlockr will also try to determine the type of the variable from its name. Variables starting with `is` or `has` are assumed to be booleans, and `callback`, `cb`, `done`, `fn`, and `next` are assumed to be functions. If you use your own variable naming system (eg: hungarian notation: booleans all start with `b`, arrays start with `arr`), you can define these rules yourself.\n\n### Comment extension\n\nPressing enter inside a docblock will automatically insert a leading asterisk and maintain your indentation.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/auto-indent.gif)\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/auto-indent-2.gif)\n\nThis applies to docblock comments `/** like this */` as well as inline double-slash comments `// like this`\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/single-line.gif)\n\nIn either case, you can press `shift+enter` to stop the automatic extension.\n\nOftentimes, when documenting a parameter, or adding a description to a tag, your description will cover multiple lines. If the line you are on is directly following a tag line, pressing `tab` will move the indentation to the correct position.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/deep-indent.gif)\n\n### Multiline comment decoration\n\nIf you write a multiline comment and use `Docblockr:Decorate Multiline`, Docblockr will create block comment decoration.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/multiline-decorate.gif)\n\n### Comment decoration\n\nIf you write a double-slash comment and then use `Docblockr:Decorate`, DocBlockr will 'decorate' that line for you.\n\n    // Foo bar baz<<Docblockr:Decorate>>\n\n    -- becomes\n\n    /////////////////\n    // Foo bar baz //\n    /////////////////\n\n### Reparsing a DocBlock\n\nSometimes, you'll perform some action which clears the fields (sections of text which you can navigate through using `tab`). This leaves you with a number of placeholders in the DocBlock with no easy way to jump to them.\n\nWith DocBlockr, you can reparse a comment and reactivate the fields by using command `Docblockr:Reparse`\n\n### Reformatting paragraphs\n\nInside a comment block, hit `Docblockr:Wrap Lines` to wrap the lines to make them fit within your rulers. If you would like subsequent lines in a paragraph to be indented, you can adjust the `indentation_spaces_same_para` setting. For example, a value of `3` might look like this:\n\n    /**\n     * Duis sed arcu non tellus eleifend ullamcorper quis non erat. Curabitur\n     *   metus elit, ultrices et tristique a, blandit at justo.\n     * @param  {String} foo Lorem ipsum dolor sit amet.\n     * @param  {Number} bar Nullam fringilla feugiat pretium. Quisque\n     *   consectetur, risus eu pellentesque tincidunt, nulla ipsum imperdiet\n     *   massa, sit amet adipiscing dolor.\n     * @return {[Type]}\n     */\n\n## Configuration ##\n\nYou can access the configuration settings by entering `Docblockr` in atom settings window\n\n\n- `indentation_spaces` *(Number)* The number of spaces to indent after the leading asterisk.\n\n        // indentation_spaces = 1\n        /**\n         * foo\n         */\n\n        // indentation_spaces = 5\n        /**\n         *     foo\n         */\n\n- `align_tags` *(String)* Whether the words following the tags should align. Possible values are `'no'`, `'shallow'` and `'deep'`\n\n    > For backwards compatibility, `false` is equivalent to `'no'`, `true` is equivalent to `'shallow'`\n\n    `'shallow'` will align only the first words after the tag. eg:\n\n        @param    {MyCustomClass} myVariable desc1\n        @return   {String} foo desc2\n        @property {Number} blahblah desc3\n\n    `'deep'` will align each component of the tags, eg:\n\n        @param    {MyCustomClass} myVariable desc1\n        @return   {String}        foo        desc2\n        @property {Number}        blahblah   desc3\n\n\n- `extra_tags` *(Array.String)* An array of strings, each representing extra boilerplate comments to add to *functions*. These can also include arbitrary text (not just tags).\n\n        // extra_tags = This is a cool function, @author nickf, @version ${1:[version]}\n        /**<<enter>>\n        function foo (x) {}\n\n        /**\n         * [foo description]\n         * This is a cool function\n         * @author nickf\n         * @version [version]\n         * @param  {[type]} x [description]\n         * @return {[type]}\n         */\n        function foo (x) {}\n\n    Basic variable substitution is supported here for the variables `date` and `datetime`, wrapped in double curly brackets.\n\n        // extra_tags = @date {{date}}, @anotherdate {{datetime}}\n        /**<<enter>>\n        function foo() {}\n\n        /**\n         * [foo description]\n         * @date     2013-03-25\n         * @datetime 2013-03-25T21:16:25+0100\n         * @return   {[type]}\n         */\n\n- `extra_tags_go_after` *(Boolean)* If true, the extra tags are placed at the end of the block (after param/return). Default: `false`\n\n- `extend_double_slash` *(Boolean)* Whether double-slash comments should be extended. An example of this feature is described above. Default: `true`\n\n- `deep_indent` *(Boolean)* Whether pressing tab at the start of a line in docblock should indent to match the previous line's description field. An example of this feature is described above. Default: `true`\n\n- `notation_map` *(Array)* An array of notation objects. Each notation object must define either a `prefix` OR a `regex` property, and a `type` property.\n\n- `return_tag` *(String)* The text which should be used for a `@return` tag. By default, `@return` is used, however this can be changed to `@returns` if you use that style.\n\n- `spacer_between_sections` *(String)* If true, then extra blank lines are inserted between the sections of the docblock. If set to `\"after_description\"` then a spacer will only be added between the description and the first tag. Possible values are `\"true\"`, `\"false\"` and `\"after_description\"`. Default: `\"false\"`.\n\n- `indentation_spaces_same_para` *(Number)* Described above in the *Reformatting paragraphs* section. Default: `1`\n\n- `autoadd_method_tag` *(Boolean)* Add a `@method` tag to docblocks of functions. Default: `false`\n\n- `simple_mode` *(Boolean)* If true, DocBlockr won't add a template when creating a doc block before a function or variable. Useful if you don't want to write Javadoc-style, but still want your editor to help when writing block comments. Default: `false`\n\n- `lower_case_primitives` *(Boolean)* If true, primitive data types are added in lower case, eg \"number\" instead of \"Number\". Default: `false`\n\n- `short_primitives` *(Boolean)* If true, the primitives `Boolean` and `Integer` are shortened to `Bool` and `Int`. Default: `false`\n\n- `newline_after_block` *(Boolean)* If true, an extra line break is added after the end of a docblock to separate it from the code. Default `false`\n\n- `c_style_block_comments` *(Boolean)* If true, block comments (starting `/* `) will have asterisks placed on subsequent newlines. Default `false`\n\n### Note\nAll credits for this package goes to [SublimeJsdocs][jsdocs] who have created a wonderful plugin for Sublime Text. I have just ported the package to Atom and Javascript.\n\nAll features except macros have been implemented. Please create issues for bugs.\n\n### TODO\nAdd test cases.\n\n[atom]: http://atom.io/\n[jsdocs]: https://github.com/spadgos/sublime-jsdocs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nikhilkalige/docblockr.git"
  },
  "scripts": {
    "test": "cd ~/.atom/packages; atom --test docblockr/spec"
  },
  "version": "0.11.0",
  "_atomModuleCache": {
    "version": 1,
    "dependencies": [],
    "extensions": {
      ".js": [
        "lib/docblockr-worker.js",
        "lib/docblockr.js",
        "lib/docsparser.js",
        "lib/languages/actionscript.js",
        "lib/languages/coffee.js",
        "lib/languages/cpp.js",
        "lib/languages/java.js",
        "lib/languages/javascript.js",
        "lib/languages/objc.js",
        "lib/languages/php.js",
        "lib/languages/processing.js",
        "lib/languages/rust.js",
        "lib/languages/typescript.js",
        "lib/utils.js",
        "lib/xregexp.js"
      ],
      ".json": [
        "package.json"
      ]
    },
    "folders": []
  }
}